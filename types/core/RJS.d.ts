import 'pixi';
import 'p2';
import { Game, Graphics } from 'phaser-ce';
import RJSControl from './RJSControl';
import BackgroundManager from '../managers/BackgroundManager';
import CharacterManager from '../managers/CharacterManager';
import AudioManager from '../managers/AudioManager';
import CGSManager from '../managers/CGSManager';
import TextManager from '../managers/TextManager';
import TweenManager from '../managers/TweenManager';
import LogicManager from '../managers/LogicManager';
import StoryManager from '../managers/StoryManager';
import Ambient from '../screen-effects/Ambient';
import Effects from '../screen-effects/Effects';
import Transition from '../screen-effects/Transition';
import RJSGUI from '../gui/RJSGUI';
import { RJSGameConfig, StoryConfig } from './RJSGameConfig';
import UserPreferences from './UserPreferences';
export default class RJS extends Game {
    gameStarted: boolean;
    control: RJSControl;
    xShots: any[];
    blackOverlay: Graphics;
    setup: any;
    story: object;
    guiSetup: any;
    gui: RJSGUI;
    tools: any;
    pluginsRJS: any;
    addPlugin(name: string, cls: any): void;
    config: RJSGameConfig;
    userPreferences: UserPreferences;
    storyConfig: StoryConfig;
    interruptAction: any;
    managers: {
        background?: BackgroundManager;
        character?: CharacterManager;
        audio: AudioManager;
        cgs?: CGSManager;
        text: TextManager;
        tween: TweenManager;
        logic: LogicManager;
        story: StoryManager;
    };
    screenEffects: {
        ambient: Ambient;
        effects: Effects;
        transition: Transition;
    };
    constructor(config: RJSGameConfig);
    launch(): void;
    setupScreen(): void;
    initStory(): Promise<void>;
    pause(): void;
    takeXShot(): void;
    unpause(force?: any): void;
    setBlackOverlay(): void;
    removeBlackOverlay(): void;
    endGame(): void;
    start(): Promise<void>;
    skip(): void;
    auto(): void;
    mute(): void;
    save(slot?: any): void;
    getSlotThumbnail(slot: any): string;
    loadSlot(slot: any): Promise<void>;
    waitForClick(callback?: any): void;
    waitTimeout(time: any, callback?: any): void;
    waitForClickOrTimeout(time: any, callback: any): void;
    onTap(pointer: any, doubleTap?: any): void;
    initInput(): void;
    lockClick(): void;
    resolveAction(): void;
    onInterpretActions(): void;
}
